const { Client } = require('@elastic/elasticsearch');
const { getQueryVector } = require('./nlp.service');
require('dotenv').config();

const client = new Client({
  node: process.env.ELASTICSEARCH_URL,
  auth: {
    username: process.env.ELASTICSEARCH_USERNAME,
    password: process.env.ELASTICSEARCH_PASSWORD
  }
});

// Ki·ªÉm tra k·∫øt n·ªëi Elasticsearch
client.ping()
  .then(() => console.log('K·∫øt n·ªëi Elasticsearch th√†nh c√¥ng'))
  .catch(err => console.error('L·ªói k·∫øt n·ªëi Elasticsearch:', err));

async function searchDocuments(query, type = 'keyword', page = 1, size = 10, field = 'all', fromDate, toDate, documentTypes) { // Thay ƒë·ªïi documentType th√†nh documentTypes (s·ªë nhi·ªÅu)
  const from = (page - 1) * size;
  let body;

  const must = [];
  const filter = [];
  const should = []; // Th√™m m·∫£ng should ƒë·ªÉ ch·ª©a c√°c ƒëi·ªÅu ki·ªán t√πy ch·ªçn

  // üëâ L·ªçc theo ng√†y ban h√†nh
  if (fromDate || toDate) {
    const range = {};
    if (fromDate) range.gte = fromDate;
    if (toDate) range.lte = toDate;
    filter.push({ range: { ngay_ban_hanh: range } });
  }

  // üëâ L·ªçc theo lo·∫°i vƒÉn b·∫£n (c√≥ th·ªÉ l√† nhi·ªÅu lo·∫°i)
  if (documentTypes && documentTypes.length > 0) {
    filter.push({ terms: { loai_van_ban: documentTypes } }); // S·ª≠ d·ª•ng terms thay v√¨ term ƒë·ªÉ l·ªçc nhi·ªÅu gi√° tr·ªã
  }

  if (type === 'semantic') {
    const queryVector = await getQueryVector(query);

    // ∆Øu ti√™n t√¨m ki·∫øm ng·ªØ nghƒ©a
    should.push({
      script_score: {
        query: { match_all: {} }, // Match all documents initially, sau ƒë√≥ t√≠nh ƒëi·ªÉm theo ng·ªØ nghƒ©a
        script: {
          source: "cosineSimilarity(params.query_vector, 'vector') + 1.0",
          params: { query_vector: queryVector }
        },
        min_score: 1.7 // Ng∆∞·ª°ng ƒëi·ªÉm t·ªëi thi·ªÉu cho semantic search
      }
    });

    // K·∫øt h·ª£p v·ªõi t√¨m ki·∫øm t·ª´ kh√≥a (keyword search) ƒë·ªÉ b·ªï sung k·∫øt qu·∫£
    // ƒêi·ªÅu n√†y gi√∫p t√¨m ki·∫øm ƒë∆∞·ª£c c·∫£ c√°c t√†i li·ªáu ch·ª©a t·ª´ kh√≥a li√™n quan
    if (query && query.trim() !== "") {
      should.push({
        multi_match: {
          query,
          fields: ['title', 'content'],
          fuzziness: 'AUTO',
          boost: 0.5 // Boost th·∫•p h∆°n semantic ƒë·ªÉ semantic ƒë∆∞·ª£c ∆∞u ti√™n h∆°n
        }
      });
    }

    body = {
      from,
      size,
      query: {
        bool: {
          should,
          minimum_should_match: 1, // √çt nh·∫•t m·ªôt trong c√°c ƒëi·ªÅu ki·ªán 'should' ph·∫£i kh·ªõp (semantic ho·∫∑c keyword)
          filter // √Åp d·ª•ng c√°c b·ªô l·ªçc c·ª©ng (ng√†y, lo·∫°i vƒÉn b·∫£n)
        }
      }
    };

  } else { // Keyword search
    let fields = ['title', 'content'];
    if (field === 'title') fields = ['title'];
    else if (field === 'content') fields = ['content'];

    if (query && query.trim() !== "") {
      // T√¨m ki·∫øm ƒëa tr∆∞·ªùng v·ªõi ƒë·ªô m·ªù (fuzziness)
      must.push({
        multi_match: {
          query,
          fields,
          fuzziness: 'AUTO'
        }
      });

      // ∆Øu ti√™n c√°c k·∫øt qu·∫£ kh·ªõp ch√≠nh x√°c v·ªõi c·ª•m t·ª´ (phrase search)
      should.push({
        multi_match: {
          query,
          type: "phrase",
          fields,
          boost: 2 // TƒÉng ƒëi·ªÉm ƒë√°ng k·ªÉ cho c·ª•m t·ª´ ch√≠nh x√°c
        }
      });

      // ∆Øu ti√™n c√°c k·∫øt qu·∫£ c√≥ t·ª´ kh√≥a trong ti√™u ƒë·ªÅ (title)
      should.push({
        match: {
          title: {
            query,
            boost: 3 // R·∫•t quan tr·ªçng n·∫øu t·ª´ kh√≥a c√≥ trong ti√™u ƒë·ªÅ
          }
        }
      });
    }

    // X√¢y d·ª±ng truy v·∫•n cu·ªëi c√πng
    const finalQuery = {
      bool: {
        must,
        filter,
        should,
        
        minimum_should_match: should.length > 0 ? 1 : 0
      }
    };

    // N·∫øu kh√¥ng c√≥ b·∫•t k·ª≥ ƒëi·ªÅu ki·ªán t√¨m ki·∫øm hay l·ªçc n√†o, d√πng match_all ƒë·ªÉ tr·∫£ v·ªÅ t·∫•t c·∫£ t√†i li·ªáu
    if (must.length === 0 && filter.length === 0 && should.length === 0) {
      finalQuery.match_all = {}; // Th√™m match_all n·∫øu kh√¥ng c√≥ ƒëi·ªÅu ki·ªán n√†o
      delete finalQuery.bool; // X√≥a bool v√¨ kh√¥ng c·∫ßn n·ªØa
    }


    body = {
      from,
      size,
      query: finalQuery
    };
  }

  console.dir(body, { depth: null }); 
  return client.search({ index: 'pdf_documents3', body });
}

module.exports = { client, searchDocuments };